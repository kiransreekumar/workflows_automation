variables:
  - group: 'Devops Automation'

trigger:
  branches:
    include:
    - main


stages:
- stage: 'Git_and_Dependencies'
  condition: |
    and(
      ne(variables['Build.SourceBranch'], 'refs/heads/releases'),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  jobs:
  - job: 'Git_build'
    pool:
      vmImage: 'ubuntu-20.04'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'
    - checkout: self
      persistCredentials: "true"
      clean: "true"
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'





- stage: 'Terraform_Deploy'
  jobs:
  - job: 'Terraform_Steps'
    workspace:
      clean: all
    steps:
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
      displayName: 'Install Databricks CLI'

    - script: |
        pip install poetry
      displayName: 'Install Poetry'
    - script: |
        poetry build
      displayName: 'Poetry Build whl'

    - script: databricks fs cp $(Build.Repository.LocalPath)/dist/*.whl dbfs:/Volumes/wheel_catalog/wheel_schema/wheel_volume --overwrite
      displayName: 'Copy to volumes'
    - script: terraform -chdir=terraform/modules/workflows/ init -backend-config="resource_group_name=$(resource_group_name)" -backend-config="storage_account_name=$(storage_account_name)" -backend-config="container_name=$(container_name)" -backend-config="key=prod.terraform.tfstate"
      displayName: 'Terraform Init'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/modules/workflows/  validate
      displayName: 'Terraform Validate'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/modules/workflows/  plan 
      displayName: 'Terraform Plan'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/modules/workflows/  apply -auto-approve
      displayName: 'Terraform Apply'
      workingDirectory: "$(Build.SourcesDirectory)"

      